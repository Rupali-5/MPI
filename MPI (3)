#include <mpi.h>
#include <stdio.h>
#include <stdlib.h>

int main(int argc, char** argv) {
  int rank, size, i, n;
  int sum = 0, local_sum = 0;
  int* array;

  if (argc != 2) {
    fprintf(stderr, "Usage: %s <n>\n", argv[0]);
    exit(1);
  }

  // Get the number of elements from the command-line argument
  n = atoi(argv[1]);

  // Initialize MPI
  MPI_Init(&argc, &argv);

  // Get the rank of the current process
  MPI_Comm_rank(MPI_COMM_WORLD, &rank);

  // Get the total number of processes
  MPI_Comm_size(MPI_COMM_WORLD, &size);

  // Calculate the number of elements per process
  int elements_per_proc = n / size;
  int remainder = n % size;

  // Calculate the starting and ending indices for each process
  int start_index = rank * elements_per_proc + 1;
  int end_index = (rank + 1) * elements_per_proc;
  if (rank == size - 1) {
    end_index += remainder;
  }

  // Print the range of numbers assigned to each process
  printf("Process %d: Start index = %d, End index = %d\n", rank, start_index, end_index);

  // Calculate the sum of the local portion of the array
  for (i = start_index; i <= end_index; i++) {
    local_sum += i;
  }

  // Print the local sum calculated by each process
  printf("Local sum for process %d: %d\n", rank, local_sum);

  // Reduce the local sums from all processes to the final sum
  MPI_Reduce(&local_sum, &sum, 1, MPI_INT, MPI_SUM, 0, MPI_COMM_WORLD);

  // Print the final sum calculated by process 0
  if (rank == 0) {
    printf("Final sum: %d\n", sum);
  }

  // Finalize MPI
  MPI_Finalize();

  return 0;
}

